% Deep learning exercise: digit classification with a simple deep network
% Requirement: Matlab 2018+ (neural network toolbox)
% Download digit dataset (zip file) and extract a zip file from http://bit.ly/2ywjxAh (Caltech_Dataset.zip)
% Make sure that a zip file is extracted to a folder 'Caltech_Dataset'
% Download pretrainedAlexNet.mat file as well



% Read and store dataset images
clear; clc;
dataset_folder = 'Caltech_Dataset';
imageDataset = imageDatastore(dataset_folder,'IncludeSubfolders',true,'LabelSource','foldernames');



% Check if the dataset is properly loaded
% Check the label, and count the total number of images
label_count = countEachLabel(imageDataset)
totalCount = size(imageDataset.Files,1)



% Randomly select 10 images and display
figure;
randImageSelection = randperm(totalCount,10);
for i = 1:10
    subplot(2,5,i);
    imshow(imageDataset.Files{randImageSelection(i)});
end



% Load pre-trained AlexNet
load('pretrainedAlexNet.mat')

% You may check on the AlexNet architecture with following command
pretrainedAlexNet.Layers

% Modify AlexNet: remove the last layers, and add new layers
newLayers = pretrainedAlexNet.Layers(1:end-3);

modifiedAlexNet = [
    
    newLayers
    fullyConnectedLayer(5)
    softmaxLayer
    classificationLayer

];


% Split image dataset into 'training:validation:test' (or simply 'training:validation' is also fine)
% In this exercise, we will split 'training:validation:test = 80:10:10' (you may choose other ratio)
% First, split the entire dataset into training vs (validation & test) --> 80%:20%
% Second, split (validation & test) dataset into validation vs test, 50%:50% --> 15%:15%

[imageTrainSet,imageValTestSet] = splitEachLabel(imageDataset,0.8,'randomized');
[imageValidationSet,imageTestSet] = splitEachLabel(imageValTestSet,0.5,'randomized');



% Configure training options
CNNtrainOptions = trainingOptions('sgdm', ...
    'InitialLearnRate',0.0001, ...
    'MiniBatchSize', 10, ...
    'MaxEpochs',8, ...
    'ValidationData',imageValidationSet, ...
    'ValidationFrequency',5, ...
    'Plots','training-progress');



% Begin the network training
trainedNetwork = trainNetwork(imageTrainSet,modifiedAlexNet,CNNtrainOptions);



% Compute accuracy on test set
[predictionOut,probabilityOut] = classify(trainedNetwork,imageTestSet);
accuracy = mean(predictionOut == imageTestSet.Labels)



% Display 6 randomly selected images from test set, and show prediction and ground truth
randSelectTest = randperm(numel(imageTestSet.Files),6);
figure
for i = 1:6
    subplot(2,3,i)
    I = readimage(imageTestSet,randSelectTest(i));
    imshow(I)
    predictionLabel = predictionOut(randSelectTest(i));
    gtlabelNow = char(imageTestSet.Labels(randSelectTest(i)));

    title({'\color{red}Predicted:' + string(predictionLabel) + '(' + ...
           num2str(100*max(probabilityOut(randSelectTest(i),:)),3)+ '%)',...
           'TrueValue:' + string(gtlabelNow)});
end

